const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testAchievements() {
  try {
    console.log('üß™ Test du syst√®me d\'achievements...\n')

    // 1. V√©rifier que les achievements existent
    console.log('1. V√©rification des achievements dans la base de donn√©es...')
    const achievements = await prisma.achievement.findMany()
    console.log(`‚úÖ ${achievements.length} achievements trouv√©s dans la base de donn√©es`)

    if (achievements.length === 0) {
      console.log('‚ö†Ô∏è  Aucun achievement trouv√©. Initialisation n√©cessaire.')
      return
    }

    // 2. Afficher quelques achievements
    console.log('\n2. Exemples d\'achievements:')
    achievements.slice(0, 3).forEach(achievement => {
      console.log(`   - ${achievement.name} (${achievement.rarity}) - ${achievement.points} points`)
    })

    // 3. V√©rifier les utilisateurs
    console.log('\n3. V√©rification des utilisateurs...')
    const users = await prisma.user.findMany()
    console.log(`‚úÖ ${users.length} utilisateurs trouv√©s`)

    if (users.length === 0) {
      console.log('‚ö†Ô∏è  Aucun utilisateur trouv√©. Cr√©ez un utilisateur d\'abord.')
      return
    }

    // 4. V√©rifier les achievements des utilisateurs
    console.log('\n4. V√©rification des achievements des utilisateurs...')
    const userAchievements = await prisma.userAchievement.findMany({
      include: {
        user: true,
        achievement: true
      }
    })
    console.log(`‚úÖ ${userAchievements.length} achievements utilisateur trouv√©s`)

    if (userAchievements.length > 0) {
      console.log('\n   Achievements d√©bloqu√©s:')
      userAchievements.forEach(ua => {
        console.log(`   - ${ua.user.email}: ${ua.achievement.name}`)
      })
    }

    // 5. Statistiques
    console.log('\n5. Statistiques:')
    const totalAchievements = achievements.length
    const totalUnlocked = userAchievements.length
    const completionRate = totalAchievements > 0 ? Math.round((totalUnlocked / totalAchievements) * 100) : 0
    
    console.log(`   - Total achievements: ${totalAchievements}`)
    console.log(`   - Achievements d√©bloqu√©s: ${totalUnlocked}`)
    console.log(`   - Taux de completion: ${completionRate}%`)

    // 6. V√©rifier les cat√©gories
    console.log('\n6. R√©partition par cat√©gorie:')
    const categories = {}
    achievements.forEach(achievement => {
      categories[achievement.category] = (categories[achievement.category] || 0) + 1
    })
    
    Object.entries(categories).forEach(([category, count]) => {
      console.log(`   - ${category}: ${count} achievements`)
    })

    // 7. V√©rifier les raret√©s
    console.log('\n7. R√©partition par raret√©:')
    const rarities = {}
    achievements.forEach(achievement => {
      rarities[achievement.rarity] = (rarities[achievement.rarity] || 0) + 1
    })
    
    Object.entries(rarities).forEach(([rarity, count]) => {
      console.log(`   - ${rarity}: ${count} achievements`)
    })

    console.log('\n‚úÖ Test termin√© avec succ√®s!')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le test
testAchievements() 