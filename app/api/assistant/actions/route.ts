import { NextRequest, NextResponse } from 'next/server'
import { verifyToken } from "../../../../lib/auth"
import { prisma } from "../../../../lib/prisma"

interface ActionResponse {
  content: string
  suggestions: string[]
  data?: any
}

export async function POST(request: NextRequest) {
  try {
    // V√©rifier l'authentification
    const token = request.headers.get('authorization')?.replace('Bearer ', '')
    if (!token) {
      return NextResponse.json({ error: 'Token manquant' }, { status: 401 })
    }

    const decoded = verifyToken(token)
    if (!decoded) {
      return NextResponse.json({ error: 'Token invalide' }, { status: 401 })
    }

    const { action, userProfile } = await request.json()

    if (!action) {
      return NextResponse.json({ error: 'Action requise' }, { status: 400 })
    }

    // R√©cup√©rer les donn√©es de l'utilisateur
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      include: {
        goals: {
          include: {
            tasks: true
          }
        },
        journalEntries: {
          orderBy: { createdAt: 'desc' },
          take: 10
        }
      }
    })

    if (!user) {
      return NextResponse.json({ error: 'Utilisateur non trouv√©' }, { status: 404 })
    }

    // Traiter l'action demand√©e
    const response = await handleAction(action, user)

    return NextResponse.json({
      response: response.content,
      suggestions: response.suggestions,
      ...(response.data && { data: response.data })
    })

  } catch (error) {
    console.error('Erreur dans l\'API actions:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}

async function handleAction(action: string, user: any): Promise<ActionResponse> {
  switch (action) {
    case 'analyze_progress':
      return analyzeProgress(user)
    
    case 'create_goal':
      return createGoalGuide(user)
    
    case 'wellness_tips':
      return wellnessTips(user)
    
    case 'productivity_hacks':
      return productivityHacks(user)
    
    default:
      return {
        content: "Action non reconnue. Je peux vous aider avec : analyse de progression, cr√©ation d'objectifs, conseils bien-√™tre, ou astuces productivit√©.",
        suggestions: [
          "Analyser ma progression",
          "Cr√©er un nouvel objectif",
          "Conseils bien-√™tre",
          "Astuces productivit√©"
        ]
      }
  }
}

function analyzeProgress(user: any) {
  const goals = user.goals
  const totalGoals = goals.length
  const completedGoals = goals.filter((goal: any) => goal.status === 'COMPLETED').length
  const activeGoals = goals.filter((goal: any) => goal.status === 'IN_PROGRESS').length
  const overdueGoals = goals.filter((goal: any) => {
    if (goal.deadline && goal.status !== 'COMPLETED') {
      return new Date(goal.deadline) < new Date()
    }
    return false
  }).length

  const progressPercentage = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0

  // Analyser les tendances
  const recentGoals = goals.filter((goal: any) => {
    const goalDate = new Date(goal.createdAt)
    const monthAgo = new Date()
    monthAgo.setMonth(monthAgo.getMonth() - 1)
    return goalDate >= monthAgo
  })

  const analysis = `
üìä **RAPPORT DE PROGRESSION D√âTAILL√â**

üéØ **Vue d'ensemble :**
‚Ä¢ Objectifs totaux : ${totalGoals}
‚Ä¢ Compl√©t√©s : ${completedGoals} (${progressPercentage}%)
‚Ä¢ En cours : ${activeGoals}
‚Ä¢ En retard : ${overdueGoals}

${getDetailedAnalysis(goals, recentGoals)}

üí° **Recommandations :**
${getRecommendations(goals, progressPercentage)}
  `.trim()

  return {
    content: analysis,
    suggestions: [
      "Cr√©er un nouvel objectif",
      "Voir le d√©tail de mes objectifs",
      "Demander des conseils sp√©cifiques",
      "Analyser mes tendances d'humeur"
    ],
    data: {
      totalGoals,
      completedGoals,
      activeGoals,
      overdueGoals,
      progressPercentage
    }
  }
}

function createGoalGuide(user: any) {
  const existingGoals = user.goals.length
  const categories = ['Fitness', 'Carri√®re', 'Apprentissage', 'Relations', 'Bien-√™tre', 'Finances']

  const guide = `
üéØ **GUIDE DE CR√âATION D'OBJECTIFS SMART**

üìã **M√©thode SMART :**
**S**p√©cifique : D√©finissez clairement ce que vous voulez accomplir
**M**esurable : Comment saurez-vous que vous avez r√©ussi ?
**A**tteignable : Est-ce r√©aliste avec vos ressources ?
**R**√©aliste : Correspond-il √† vos priorit√©s ?
**T**emporel : Quel est votre d√©lai ?

üìä **Votre situation actuelle :**
‚Ä¢ Objectifs existants : ${existingGoals}
‚Ä¢ Cat√©gories populaires : ${categories.join(', ')}

üí° **Exemples d'objectifs SMART :**
‚Ä¢ "Perdre 5kg en 3 mois en faisant 30min d'exercice 3x/semaine"
‚Ä¢ "Lire 12 livres cette ann√©e (1 par mois)"
‚Ä¢ "Apprendre l'espagnol : niveau B1 en 6 mois"

üöÄ **Pr√™t √† cr√©er votre objectif ?**
  `.trim()

  return {
    content: guide,
    suggestions: [
      "Je veux perdre du poids",
      "Je veux apprendre une nouvelle comp√©tence",
      "Je veux am√©liorer ma productivit√©",
      "Je veux mieux g√©rer mon stress"
    ]
  }
}

function wellnessTips(user: any) {
  // Analyser les entr√©es de journal pour personnaliser les conseils
  const recentEntries = user.journalEntries.slice(0, 5)
  const stressLevel = analyzeStressLevel(recentEntries)
  
  const tips = `
üßò‚Äç‚ôÄÔ∏è **CONSEILS BIEN-√äTRE PERSONNALIS√âS**

${stressLevel > 0.6 ? '‚ö†Ô∏è **Niveau de stress √©lev√© d√©tect√©** - Voici des conseils prioritaires :' : 'üíö **Votre bien-√™tre semble √©quilibr√©** - Continuez sur cette lanc√©e :'}

üåÖ **Routine matinale (15 min) :**
‚Ä¢ 5 min : √âtirements doux
‚Ä¢ 5 min : M√©ditation ou respiration profonde
‚Ä¢ 5 min : Planification de la journ√©e

üíß **Hydratation optimale :**
‚Ä¢ Buvez 2L d'eau par jour
‚Ä¢ Commencez par un verre d'eau au r√©veil
‚Ä¢ √âvitez la caf√©ine apr√®s 14h

üò¥ **Sommeil de qualit√© :**
‚Ä¢ Couchez-vous √† heure fixe
‚Ä¢ √âvitez les √©crans 1h avant le coucher
‚Ä¢ Cr√©ez une routine relaxante

üåø **Activit√©s anti-stress :**
‚Ä¢ Marche en nature (30 min/jour)
‚Ä¢ Journaling (10 min/jour)
‚Ä¢ Activit√© cr√©ative (dessin, musique)

üçé **Nutrition √©quilibr√©e :**
‚Ä¢ 3 repas + 2 collations
‚Ä¢ Privil√©giez les aliments non transform√©s
‚Ä¢ Mangez en pleine conscience

${stressLevel > 0.6 ? '\nüö® **Conseils urgents pour r√©duire le stress :**\n‚Ä¢ Pratiquez la respiration 4-7-8\n‚Ä¢ Prenez des micro-pauses toutes les heures\n‚Ä¢ Limitez les notifications' : ''}
  `.trim()

  return {
    content: tips,
    suggestions: [
      "Comment m√©diter efficacement ?",
      "Routine matinale d√©taill√©e",
      "Gestion du stress au travail",
      "Am√©liorer mon sommeil"
    ],
    data: { stressLevel }
  }
}

function productivityHacks(user: any) {
  const activeGoals = user.goals.filter((goal: any) => goal.status === 'IN_PROGRESS').length
  
  const hacks = `
‚ö° **ASTUCES PRODUCTIVIT√â AVANC√âES**

üìà **Bas√© sur vos ${activeGoals} objectifs actifs, voici mes recommandations :**

‚è∞ **Technique Pomodoro :**
‚Ä¢ 25 min de travail concentr√©
‚Ä¢ 5 min de pause courte
‚Ä¢ 15 min de pause apr√®s 4 cycles
‚Ä¢ Utilisez un minuteur visuel

üìù **Matrice d'Eisenhower :**
**Urgent + Important** : Faites maintenant
**Important + Pas urgent** : Planifiez
**Urgent + Pas important** : D√©l√©guez
**Pas urgent + Pas important** : √âliminez

üéØ **Focus et concentration :**
‚Ä¢ Mode avion pendant le travail
‚Ä¢ Espace de travail minimaliste
‚Ä¢ Une seule t√¢che √† la fois
‚Ä¢ √âliminez les distractions visuelles

üìä **Suivi et optimisation :**
‚Ä¢ Time-tracking de vos activit√©s
‚Ä¢ Revue hebdomadaire de productivit√©
‚Ä¢ Ajustez vos m√©thodes r√©guli√®rement
‚Ä¢ C√©l√©brez les petites victoires

üîÑ **Routines efficaces :**
‚Ä¢ Planification du soir pour le lendemain
‚Ä¢ Batch processing des t√¢ches similaires
‚Ä¢ R√®gle des 2 minutes (si √ßa prend <2min, faites-le maintenant)
‚Ä¢ Syst√®me de capture des id√©es

üí° **Outils recommand√©s :**
‚Ä¢ Minuteur Pomodoro
‚Ä¢ Liste de t√¢ches digitale
‚Ä¢ Bloc-notes pour les id√©es
‚Ä¢ Calendrier pour la planification
  `.trim()

  return {
    content: hacks,
    suggestions: [
      "Comment utiliser la technique Pomodoro ?",
      "Cr√©er ma matrice de priorit√©s",
      "Organiser mon espace de travail",
      "G√©rer mes emails efficacement"
    ]
  }
}

function getDetailedAnalysis(goals: any[], recentGoals: any[]) {
  if (goals.length === 0) {
    return "üéØ **Aucun objectif d√©fini** - C'est le moment de commencer votre voyage !"
  }

  const categories = goals.reduce((acc: any, goal: any) => {
    const category = goal.category || 'G√©n√©ral'
    acc[category] = (acc[category] || 0) + 1
    return acc
  }, {})

  const topCategory = Object.keys(categories).reduce((a, b) => 
    categories[a] > categories[b] ? a : b, Object.keys(categories)[0]
  )

  return `
üìà **Analyse d√©taill√©e :**
‚Ä¢ Cat√©gorie favorite : ${topCategory} (${categories[topCategory]} objectifs)
‚Ä¢ Objectifs r√©cents (1 mois) : ${recentGoals.length}
‚Ä¢ Taux de compl√©tion : ${Math.round((goals.filter(g => g.status === 'COMPLETED').length / goals.length) * 100)}%

${recentGoals.length > 0 ? 'üÜï **Objectifs r√©cents :**\n' + recentGoals.map((goal: any) => `‚Ä¢ ${goal.title} - ${goal.status}`).join('\n') : ''}
  `.trim()
}

function getRecommendations(goals: any[], progressPercentage: number) {
  if (goals.length === 0) {
    return "üöÄ Commencez par d√©finir votre premier objectif SMART !"
  }

  if (progressPercentage >= 80) {
    return "üéâ Excellent travail ! Continuez sur cette lanc√©e et envisagez de nouveaux d√©fis."
  } else if (progressPercentage >= 50) {
    return "üëç Bonne progression ! Concentrez-vous sur la finalisation de vos objectifs en cours."
  } else if (progressPercentage >= 25) {
    return "üí™ Vous √™tes sur la bonne voie ! Identifiez les obstacles et ajustez vos strat√©gies."
  } else {
    return "üîç Analysez les raisons du retard et divisez vos objectifs en √©tapes plus petites."
  }
}

function analyzeStressLevel(entries: any[]) {
  if (entries.length === 0) return 0.5

  const stressKeywords = ['stress', 'fatigu√©', '√©puis√©', 'anxieux', 'inquiet', 'press√©']
  const positiveKeywords = ['heureux', 'calme', 'motiv√©', 'reconnaissant', 'excitant']

  let stressCount = 0
  let positiveCount = 0

  entries.forEach((entry: any) => {
    const content = (entry.content + ' ' + (entry.title || '')).toLowerCase()
    
    stressKeywords.forEach(keyword => {
      if (content.includes(keyword)) stressCount++
    })
    
    positiveKeywords.forEach(keyword => {
      if (content.includes(keyword)) positiveCount++
    })
  })

  const total = entries.length
  return stressCount / (total + positiveCount)
} 