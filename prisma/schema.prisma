// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  location  String?
  preferences Json?  // Stockage des préférences utilisateur
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  goals     Goal[]
  journalEntries JournalEntry[]
  tasks     Task[]
  notifications Notification[]
  chatMessages ChatMessage[]

  @@map("users")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  progress    Int      @default(0) // Pourcentage de progression (0-100)
  targetDate  DateTime?
  status      String   @default("en_cours") // en_cours, termine, en_pause
  category    String   @default("Général")
  priority    String   @default("moyenne") // haute, moyenne, basse
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  notifications Notification[]

  @@map("goals")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  dueDate     DateTime?
  priority    String   @default("medium") // low, medium, high
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId      String?
  goal        Goal?    @relation(fields: [goalId], references: [id], onDelete: SetNull)
  notifications Notification[]

  @@map("tasks")
}

model JournalEntry {
  id        String   @id @default(cuid())
  title     String?
  content   String
  mood      String?  // happy, sad, neutral, excited, etc.
  tags      Json?    // Array de tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // goal_reminder, task_due, achievement, etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId    String?
  goal      Goal?    @relation(fields: [goalId], references: [id], onDelete: SetNull)
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  role      String   // user, assistant
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
